export declare const indexOfThrityDaysMonth: number[];
export declare const indexOfThrityOneDaysMonth: number[];
interface RR {
    [key: string]: number;
}
export declare const monthAndNumberOfDays: RR;
export interface SS {
    [key: number]: string;
}
export declare const monthAndIndex: SS;
export declare const actualHour: (time: string[]) => number;
export declare const currentHourString: () => string;
/**
 *
 * @param date
 * @returns the actual (non-JS) numerical month value of a given date
 */
export declare const monthNumber: (date: Date) => number;
/**
 *
 * @returns yesterdays date, with the current time
 */
export declare const yesterdaysDate: () => Date;
/**
 *
 * @returns returns tomorrows date with the current time
 */
export declare const tomorrowsDate: () => Date;
/**
 *
 * @param {*} date an optional parametre of date or string (in the form YYYY-mm-dd or YYYY/mm/dd) type which when provided,
 * the function returns a value of that date and current time as JS-date data type
 * @returns
 */
export declare const givenDateAndCurrentTime: (date?: string | Date) => Date;
/**
 *
 * @param date can be of the form "YYYY-MM-DD", "YYYY/MM/DD" or "Sun Sep 11 2022"
 * @returns a non-JS numerical value of month for the given date or current date, if no argument was passed
 */
export declare const getMonth: (date?: string | Date) => number;
export declare const dateAcronym: (day: number) => "st" | "rd" | "nd" | "th" | "Invalid day number";
export declare const todaysDate: () => Date;
export declare const differenceInDays: (firstDate: string | Date, secondDate: string | Date) => number | false | undefined;
/**
 * This function gives the date of the next day, in actual human context.
 * A simple way of understanding the function is by saying; give me n days from now.
 * @param year
 * @param month javascript month structure, where january is indexed as 0
 * @param dayIncrementor if this value is supplied, then the function increaes
 * the date by this value; default value is one as expected
 */
export declare const dateForwardBuild: (year: number, month: number, dayIncrementor?: number) => Date;
export declare const dateConstrainer: (date: Date | string) => string;
/**
 * Specifically for html forms; to ensure the choosable date begins from yesterday and backward
 * @returns a string constrain to allow choosable dates from yesterday alone
 * Simple usage = (document as any).querySelector(".arrival-date").max = yesterdaysFormDate();
 */
export declare const yesterdaysFormDate: () => string;
/**
 * Specifically for html forms; to ensure the choosable date begins from tomorrow and forward
 * @returns a string constrain to allow choosable dates from yesterday alone
 * Simple usage = (document as any).querySelector(".arrival-date").max = yesterdaysFormDate();
 */
export declare const tomorrowsFormDate: () => string;
/**
 * Specifically for html forms; to ensure the choosable date begins from tomorrow and forward
 * @returns a string constrain to allow choosable dates from tomorrow alone
 * Simple usage = (document as any).querySelector(".arrival-date").max = todaysFormDate();
 */
export declare const todaysFormDate: () => string;
/**
 * Think of the function as saying; future date should be greater than past date.
 * If both dates are same, the function returns false; implying that the future date
 * exceedes the other.
 * @param pastDate: string or Date data type. string must follow the format YYYY-MM-DD or YYYY/MM/DD
 * @param futureDate: string or Date data type. string must follow the format YYYY-MM-DD or YYYY/MM/DD
 * @returns true if future date is greater than past date
 */
export declare const varyingDatesComparator: (pastDate: string | Date, futureDate: string | Date) => boolean;
/**
 * Imagine the function saying; both dates are equal
 * @param firstDate can be of the form "YYYY-MM-DD", "YYYY/MM/DD" or "Sun Sep 11 2022"
 * @param secondDate can be of the form "YYYY-MM-DD", "YYYY/MM/DD" or "Wed Oct 05 2021"
 * @returns true if both dates are equal. Otherwise, false
 */
export declare const sameDateComparator: (firstDate: string | Date, secondDate: string | Date) => boolean;
/**
 * This function says; I'll give you yesterdays' date corresponidng to the given
 * date you give me.
 * @param dateData a date-data of the form "YYYY-MM-DD", "YYYY/MM/DD" or "YYY-MM-DDTHH:mm:ss.000Z"
 * @returns
 */
export declare const yesterdaysDateByGivenDate: (dateData: string | Date) => Date;
/**
 * This function says; I'll give you tomorrows' date corresponidng to the given
 * date you give me.
 * @param dateData a date-data of the form "YYYY-MM-DD", "YYYY/MM/DD" or "YYY-MM-DDTHH:mm:ss.000Z"
 * @returns
 */
export declare const tomorrowsDateByGivenDate: (dateData: string | Date) => Date;
/**
 * convert dates of the format: Mon Oct 17 2022; to actual date types
 * @param dateString
 * @returns
 */
export declare const dateStringToDate: (dateString: string) => Date | "Invalid date argument";
export {};
