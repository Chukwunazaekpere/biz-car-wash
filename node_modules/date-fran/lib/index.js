"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.dateStringToDate = exports.tomorrowsDateByGivenDate = exports.yesterdaysDateByGivenDate = exports.sameDateComparator = exports.varyingDatesComparator = exports.todaysFormDate = exports.tomorrowsFormDate = exports.yesterdaysFormDate = exports.dateConstrainer = exports.dateForwardBuild = exports.differenceInDays = exports.todaysDate = exports.dateAcronym = exports.getMonth = exports.givenDateAndCurrentTime = exports.tomorrowsDate = exports.yesterdaysDate = exports.monthNumber = exports.currentHourString = exports.actualHour = exports.monthAndIndex = exports.monthAndNumberOfDays = exports.indexOfThrityOneDaysMonth = exports.indexOfThrityDaysMonth = void 0;
var currentYear = new Date().getFullYear();
exports.indexOfThrityDaysMonth = [3, 5, 8, 10];
exports.indexOfThrityOneDaysMonth = [0, 2, 4, 6, 7, 9, 11];
exports.monthAndNumberOfDays = {
    "Jan": 31,
    "Feb": currentYear % 4 === 0 ? 29 : 28,
    "Mar": 31,
    "Apr": 30,
    "May": 31,
    "Jun": 30,
    "Jul": 31,
    "Aug": 31,
    "Sep": 30,
    "Oct": 31,
    "Nov": 30,
    "Dec": 31,
};
exports.monthAndIndex = {
    0: "Jan",
    1: "Feb",
    2: "Mar",
    3: "Apr",
    4: "May",
    5: "Jun",
    6: "Jul",
    7: "Aug",
    8: "Sep",
    9: "Oct",
    10: "Nov",
    11: "Dec",
};
var actualHour = function (time) {
    if (time[0] === "12") {
        if (time[2].includes("AM")) {
            return 1;
        }
        else {
            return 12 + 1;
        }
    }
    else if (time[2].includes("PM")) {
        return (+time[0] + 1) + 12;
    }
    else {
        return +time[0] + 1;
    }
};
exports.actualHour = actualHour;
var currentHourString = function () {
    return new Date().toLocaleTimeString().split(":")[0];
};
exports.currentHourString = currentHourString;
/**
 *
 * @param date
 * @returns the actual (non-JS) numerical month value of a given date
 */
var monthNumber = function (date) {
    var month = date.toDateString().split(" ")[1];
    var monthNumber = Object.values(exports.monthAndIndex).indexOf(month);
    return monthNumber;
};
exports.monthNumber = monthNumber;
/**
 *
 * @returns yesterdays date, with the current time
 */
var yesterdaysDate = function () {
    var formedDate = new Date();
    var time = formedDate.toLocaleTimeString().split(":");
    // console.log("\n\t formedDate-getMonth: ", formedDate.getMonth())
    var actualMonth = (exports.indexOfThrityDaysMonth.includes(formedDate.getMonth()) && formedDate.getDate() === 1) ? formedDate.getMonth() - 1
        : (exports.indexOfThrityOneDaysMonth.includes(formedDate.getMonth()) && formedDate.getDate() === 1) ? formedDate.getMonth() - 1
            : (formedDate.getMonth() === 2 && formedDate.getDate() === 1) ? 1 // gives March
                : formedDate.getMonth();
    var actualYesterdaysDate = (formedDate.getDate() === 1 && exports.indexOfThrityDaysMonth.includes(formedDate.getMonth())) ? exports.monthAndNumberOfDays[exports.monthAndIndex[formedDate.getMonth() - 1]]
        : (formedDate.getDate() === 1 && exports.indexOfThrityOneDaysMonth.includes(formedDate.getMonth())) ? exports.monthAndNumberOfDays[exports.monthAndIndex[formedDate.getMonth() - 1]]
            : (formedDate.getFullYear() % 4 !== 0 && formedDate.getMonth() === 2 && formedDate.getDate() === 1) ? 28
                : (formedDate.getFullYear() % 4 === 0 && formedDate.getMonth() === 2 && formedDate.getDate() === 1) ? 29
                    : formedDate.getDate() - 1;
    var ydate = new Date(currentYear, actualMonth, actualYesterdaysDate, (0, exports.actualHour)(time), +time[1], +time[2].split(" ")[0]);
    // console.log("\n\t yesterdaysDate: ", ydate)
    // console.log("\n\t tomorrowsDate: ", tomorrowsDate())
    return ydate;
};
exports.yesterdaysDate = yesterdaysDate;
/**
 *
 * @returns returns tomorrows date with the current time
 */
var tomorrowsDate = function () {
    var formedDate = new Date();
    var time = formedDate.toLocaleTimeString().split(":");
    var actualMonth = (exports.indexOfThrityDaysMonth.includes(formedDate.getMonth()) && formedDate.getDate() === 30) ? formedDate.getMonth() + 1
        : (exports.indexOfThrityOneDaysMonth.includes(formedDate.getMonth()) && formedDate.getDate() === 31) ? formedDate.getMonth() + 1
            : (formedDate.getDate() === 28 && formedDate.getFullYear() % 4 !== 0 && formedDate.getMonth() === 1) ? 2 // gives March
                : (formedDate.getDate() === 29 && formedDate.getFullYear() % 4 === 0 && formedDate.getMonth() === 1) ? 2 // gives March
                    : formedDate.getMonth();
    var actualTomorowsDate = (exports.indexOfThrityDaysMonth.includes(formedDate.getMonth()) && formedDate.getDate() === 30) ? 1
        : (exports.indexOfThrityOneDaysMonth.includes(formedDate.getMonth()) && formedDate.getDate() === 31) ? 1
            : (formedDate.getDate() === 28 && formedDate.getFullYear() % 4 !== 0 && formedDate.getMonth() === 1) ? 1
                : (formedDate.getDate() === 29 && formedDate.getFullYear() % 4 !== 0 && formedDate.getMonth() === 1) ? 1
                    : formedDate.getDate() + 1;
    var tomorrowsDate = new Date(currentYear, actualMonth, actualTomorowsDate, (0, exports.actualHour)(time), +time[1], +time[2].split(" ")[0]);
    return tomorrowsDate;
};
exports.tomorrowsDate = tomorrowsDate;
/**
 *
 * @param {*} date an optional parametre of date or string (in the form YYYY-mm-dd or YYYY/mm/dd) type which when provided,
 * the function returns a value of that date and current time as JS-date data type
 * @returns
 */
var givenDateAndCurrentTime = function (date) {
    var formedDate = new Date();
    var time = formedDate.toLocaleTimeString().split(":");
    var requiredDate;
    if (typeof (date) === "string") {
        var splittedStringDate = date.includes("-") ? date.split("-") : date.split("/");
        requiredDate = new Date(+splittedStringDate[0], +splittedStringDate[1] - 1, +splittedStringDate[2], (0, exports.actualHour)(time), +time[1], +time[2].split(" ")[0]);
        return requiredDate;
    }
    else if (date) {
        var splittedStringDate = date.toLocaleDateString().split("/");
        requiredDate = new Date(+splittedStringDate[2], +splittedStringDate[0] - 1, +splittedStringDate[1], (0, exports.actualHour)(time), +time[1], +time[2].split(" ")[0]);
        return requiredDate;
    }
    requiredDate = new Date(formedDate.getFullYear(), formedDate.getMonth(), formedDate.getDate(), (0, exports.actualHour)(time), +time[1], +time[2].split(" ")[0]);
    return requiredDate;
};
exports.givenDateAndCurrentTime = givenDateAndCurrentTime;
/**
 *
 * @param date can be of the form "YYYY-MM-DD", "YYYY/MM/DD" or "Sun Sep 11 2022"
 * @returns a non-JS numerical value of month for the given date or current date, if no argument was passed
 */
var getMonth = function (date) {
    if (typeof (date) === "string") {
        var formedDate = (0, exports.givenDateAndCurrentTime)(date);
        return formedDate.getMonth() + 1;
    }
    else if (date) {
        var splittedStringDate = date.toLocaleDateString().split("/");
        return +splittedStringDate[0];
    }
    return ((0, exports.todaysDate)().getMonth()) + 1;
};
exports.getMonth = getMonth;
var dateAcronym = function (day) {
    var numLen = String(day).length;
    var stringifiedDay = numLen === 1 ? "0".concat(day) : "".concat(day);
    // console.log("\n\t stringifiedDay: ", stringifiedDay, +stringifiedDay[1])
    if (day > 0 && day <= 31) {
        if (+stringifiedDay[1] !== 0 && stringifiedDay.includes("1") && +stringifiedDay[0] !== 1) {
            return 'st';
        }
        else if (+stringifiedDay[1] !== 0 && !stringifiedDay.includes("1") && +stringifiedDay[1] <= 3) {
            if (stringifiedDay.includes("3")) {
                return 'rd';
            }
            return "nd";
        }
        else {
            return 'th';
        }
    }
    return "Invalid day number";
};
exports.dateAcronym = dateAcronym;
var todaysDate = function () {
    return (0, exports.givenDateAndCurrentTime)();
};
exports.todaysDate = todaysDate;
var differenceInDays = function (firstDate, secondDate) {
    // console.log("\n\t differenceInDays-firstDate: ", firstDate)
    // console.log("\n\t differenceInDays-secondDate: ", secondDate)
    try {
        var actualFirstDate = new Date();
        var actualSecondDate = new Date();
        if (typeof (firstDate) === "string") {
            actualFirstDate = new Date(firstDate);
        }
        if (typeof (secondDate) === "string") {
            actualSecondDate = new Date(secondDate);
        }
        else {
            actualFirstDate = firstDate;
            actualSecondDate = secondDate;
        }
        var yearOfFirstDateToCompare = actualFirstDate.getFullYear();
        var monthOfFirstDateToCompare = actualFirstDate.getMonth();
        var dayOfFirstDateToCompare = actualFirstDate.getDate();
        var yearOfSecondDateToCompare = actualSecondDate.getFullYear();
        var monthOfSecondDateToCompare = actualSecondDate.getMonth();
        var dayOfSecondDateToCompare = actualSecondDate.getDate();
        if (yearOfFirstDateToCompare === yearOfSecondDateToCompare) {
            if (monthOfFirstDateToCompare === monthOfSecondDateToCompare) {
                return Math.abs(dayOfSecondDateToCompare - dayOfFirstDateToCompare);
            }
            var monthOfFirstDateInWords = (Object.values(exports.monthAndIndex))[monthOfFirstDateToCompare];
            var numberOfDaysInMonthOfFirstDate = exports.monthAndNumberOfDays[monthOfFirstDateInWords];
            var differenceBetweenDayOfFirstDateToCompareAndNumberOfDaysInTheMonthOfFirstDate = numberOfDaysInMonthOfFirstDate - dayOfFirstDateToCompare;
            var firstDateInSecondMonth = new Date("".concat(monthOfSecondDateToCompare, "/01/").concat(yearOfSecondDateToCompare));
            var differenceBetweenSecondDateAndFirstDayOfTheMonth = dayOfSecondDateToCompare - firstDateInSecondMonth.getDate();
            var dayDifferenInMonthOfSecondDate = differenceBetweenDayOfFirstDateToCompareAndNumberOfDaysInTheMonthOfFirstDate + differenceBetweenSecondDateAndFirstDayOfTheMonth + 1;
            // console.log("\n\t dayDifferenInMonthOfSecondDate: ", dayDifferenInMonthOfSecondDate)
            return Math.abs(dayDifferenInMonthOfSecondDate);
        }
        else {
            return false;
        }
    }
    catch (error) {
        // console.log("\n\t differenceInDays-error: ", error)
    }
};
exports.differenceInDays = differenceInDays;
/**
 * This function gives the date of the next day, in actual human context.
 * A simple way of understanding the function is by saying; give me n days from now.
 * @param year
 * @param month javascript month structure, where january is indexed as 0
 * @param dayIncrementor if this value is supplied, then the function increaes
 * the date by this value; default value is one as expected
 */
var dateForwardBuild = function (year, month, dayIncrementor) {
    var currentDate = new Date();
    var time = currentDate.toLocaleTimeString().split(":");
    var formedDate = new Date(year, month, currentDate.getDate(), (0, exports.actualHour)(time), +time[1], +time[2].split(" ")[0]);
    var actualMonth = (exports.indexOfThrityDaysMonth.includes(formedDate.getMonth()) && formedDate.getDate() === 1) ? formedDate.getMonth() - 1
        : (exports.indexOfThrityOneDaysMonth.includes(formedDate.getMonth()) && formedDate.getDate() === 1) ? formedDate.getMonth() - 1
            : (formedDate.getDate() === 28 && formedDate.getFullYear() % 4 !== 0 && formedDate.getMonth() === 1) ? 2 // gives March
                : (formedDate.getDate() === 29 && formedDate.getFullYear() % 4 !== 0 && formedDate.getMonth() === 1) ? 2 // gives March
                    : formedDate.getMonth();
    var numberOfDaysInActualMonth = exports.monthAndNumberOfDays[exports.monthAndIndex[actualMonth]];
    if (dayIncrementor) {
        if (currentDate.getDate() + dayIncrementor < numberOfDaysInActualMonth) {
            var nextDate_1 = new Date(year, month, currentDate.getDate() + dayIncrementor, (0, exports.actualHour)(time), +time[1], +time[2].split(" ")[0]);
            return nextDate_1;
        }
        var actualIncrement = currentDate.getDate() + dayIncrementor - numberOfDaysInActualMonth;
        var nextDate_2 = new Date(year, month + 1, actualIncrement === 0 ? 1 : actualIncrement, (0, exports.actualHour)(time), +time[1], +time[2].split(" ")[0]);
        return nextDate_2;
    }
    ;
    var nextDate = undefined;
    if (currentDate.getDate() === numberOfDaysInActualMonth) {
        nextDate = new Date(year, month + 1, 1, (0, exports.actualHour)(time), +time[1], +time[2].split(" ")[0]);
        return nextDate;
    }
    ;
    nextDate = new Date(year, month, currentDate.getDate() + 1, (0, exports.actualHour)(time), +time[1], +time[2].split(" ")[0]);
    return nextDate;
};
exports.dateForwardBuild = dateForwardBuild;
var dateConstrainer = function (date) {
    var dateData;
    if (typeof (date) === "string") {
        dateData = (0, exports.givenDateAndCurrentTime)(date);
    }
    else {
        dateData = new Date(date.getFullYear(), date.getMonth(), date.getDate());
    }
    var madeDate = "".concat(dateData.getFullYear(), "-").concat(dateData.getMonth() + 1 >= 10
        ? dateData.getMonth() + 1
        : "0" + (dateData.getMonth() + 1), "-").concat(dateData.getDate() >= 10 ? dateData.getDate() : "0" + (dateData.getDate()));
    return madeDate;
};
exports.dateConstrainer = dateConstrainer;
/**
 * Specifically for html forms; to ensure the choosable date begins from yesterday and backward
 * @returns a string constrain to allow choosable dates from yesterday alone
 * Simple usage = (document as any).querySelector(".arrival-date").max = yesterdaysFormDate();
 */
var yesterdaysFormDate = function () {
    var date = new Date();
    var today = "".concat(date.getFullYear(), "-").concat(date.getMonth() + 1 >= 10
        ? date.getMonth() + 1
        : "0" + (date.getMonth() + 1), "-").concat(date.getDate() >= 10 ? date.getDate() - 1 : "0" + (date.getDate() - 1));
    return today;
};
exports.yesterdaysFormDate = yesterdaysFormDate;
/**
 * Specifically for html forms; to ensure the choosable date begins from tomorrow and forward
 * @returns a string constrain to allow choosable dates from yesterday alone
 * Simple usage = (document as any).querySelector(".arrival-date").max = yesterdaysFormDate();
 */
var tomorrowsFormDate = function () {
    var date = new Date();
    var today = "".concat(date.getFullYear(), "-").concat(date.getMonth() + 1 >= 10
        ? date.getMonth() + 1
        : "0" + (date.getMonth() + 1), "-").concat(date.getDate() >= 10 ? date.getDate() + 1 : "0" + (date.getDate() + 1));
    return today;
};
exports.tomorrowsFormDate = tomorrowsFormDate;
/**
 * Specifically for html forms; to ensure the choosable date begins from tomorrow and forward
 * @returns a string constrain to allow choosable dates from tomorrow alone
 * Simple usage = (document as any).querySelector(".arrival-date").max = todaysFormDate();
 */
var todaysFormDate = function () {
    var date = new Date();
    var today = "".concat(date.getFullYear(), "-").concat(date.getMonth() + 1 >= 10
        ? date.getMonth() + 1
        : "0" + (date.getMonth() + 1), "-").concat(date.getDate() >= 10 ? date.getDate() : "0" + date.getDate());
    return today;
};
exports.todaysFormDate = todaysFormDate;
// import { actualHour, givenDateAndCurrentTime, indexOfThrityDaysMonth, indexOfThrityOneDaysMonth, monthAndIndex, monthAndNumberOfDays } from "./builders";
/**
 * Think of the function as saying; future date should be greater than past date.
 * If both dates are same, the function returns false; implying that the future date
 * exceedes the other.
 * @param pastDate: string or Date data type. string must follow the format YYYY-MM-DD or YYYY/MM/DD
 * @param futureDate: string or Date data type. string must follow the format YYYY-MM-DD or YYYY/MM/DD
 * @returns true if future date is greater than past date
 */
var varyingDatesComparator = function (pastDate, futureDate) {
    var actualpastDate = pastDate;
    var actualfutureDate = futureDate;
    if (typeof (pastDate) === "string") {
        actualpastDate = (0, exports.givenDateAndCurrentTime)(pastDate);
    }
    if (typeof (futureDate) === "string") {
        actualfutureDate = (0, exports.givenDateAndCurrentTime)(futureDate);
    }
    ;
    var yearOfpastDate = actualpastDate.getFullYear();
    var yearOffutureDate = actualfutureDate.getFullYear();
    var monthOfpastDate = actualpastDate.getMonth();
    var monthOffutureDate = actualfutureDate.getMonth();
    var dayOfpastDate = actualpastDate.getDate();
    var dayOffutureDate = actualfutureDate.getDate();
    if (yearOffutureDate < yearOfpastDate) {
        return false;
    }
    if (yearOffutureDate > yearOfpastDate) {
        return true;
    }
    if (monthOffutureDate > monthOfpastDate) {
        return true;
    }
    if (monthOffutureDate < monthOfpastDate) {
        return false;
    }
    if (dayOffutureDate < dayOfpastDate) {
        return false;
    }
    return true;
};
exports.varyingDatesComparator = varyingDatesComparator;
// console.log("\n\t dateComparator: ", varyingDatesComparator(yesterdaysDate(), givenDateAndCurrentTime("2022-08-30")));
/**
 * Imagine the function saying; both dates are equal
 * @param firstDate can be of the form "YYYY-MM-DD", "YYYY/MM/DD" or "Sun Sep 11 2022"
 * @param secondDate can be of the form "YYYY-MM-DD", "YYYY/MM/DD" or "Wed Oct 05 2021"
 * @returns true if both dates are equal. Otherwise, false
 */
var sameDateComparator = function (firstDate, secondDate) {
    if (firstDate === secondDate) {
        return true;
    }
    else {
        var actualFirstDate = firstDate;
        var actualfutureDate = secondDate;
        if (typeof (firstDate) === "string") {
            actualFirstDate = (0, exports.givenDateAndCurrentTime)(firstDate);
        }
        if (typeof (secondDate) === "string") {
            actualfutureDate = (0, exports.givenDateAndCurrentTime)(secondDate);
        }
        ;
        var yearOfFirstDate = actualFirstDate.getFullYear();
        var yearOffutureDate = actualfutureDate.getFullYear();
        var monthOfFirstDate = actualFirstDate.getMonth();
        var monthOffutureDate = actualfutureDate.getMonth();
        var dayOfFirstDate = actualFirstDate.getDate();
        var dayOffutureDate = actualfutureDate.getDate();
        if (yearOffutureDate === yearOfFirstDate) {
            if (monthOffutureDate === monthOfFirstDate) {
                if (dayOffutureDate === dayOfFirstDate) {
                    // console.log("|n\t dayOffutureDate ",dayOffutureDate)
                    return true;
                }
            }
        }
        ;
        return false;
    }
};
exports.sameDateComparator = sameDateComparator;
/**
 * This function says; I'll give you yesterdays' date corresponidng to the given
 * date you give me.
 * @param dateData a date-data of the form "YYYY-MM-DD", "YYYY/MM/DD" or "YYY-MM-DDTHH:mm:ss.000Z"
 * @returns
 */
var yesterdaysDateByGivenDate = function (dateData) {
    var reqDate = dateData;
    if (typeof (dateData) === "string" && dateData.includes("T")) {
        var splittedDate = String(dateData).split("T")[0];
        reqDate = (0, exports.givenDateAndCurrentTime)(splittedDate);
    }
    else {
        reqDate = (0, exports.givenDateAndCurrentTime)(dateData);
    }
    ;
    var year = reqDate.getFullYear();
    var month = reqDate.getMonth();
    var day = reqDate.getDate();
    var formedDate = new Date();
    var time = formedDate.toLocaleTimeString().split(":");
    var actualMonth = (exports.indexOfThrityDaysMonth.includes(month) && day === 1) ? month - 1
        : (exports.indexOfThrityOneDaysMonth.includes(month) && day === 1) ? month - 1
            : (year % 4 !== 0 && month === 2) ? 2 // gives March
                : (year % 4 === 0 && month === 2) ? 2 // gives Marc
                    : month;
    var actualYesterdaysDate = (day === 1 && exports.indexOfThrityDaysMonth.includes(month)) ? exports.monthAndNumberOfDays[exports.monthAndIndex[month - 1]]
        : (day === 1 && exports.indexOfThrityOneDaysMonth.includes(month)) ? exports.monthAndNumberOfDays[exports.monthAndIndex[month - 1]]
            : (year % 4 !== 0 && month === 2 && day === 1) ? 28
                : (year % 4 === 0 && month === 2 && day === 1) ? 29
                    : day - 1;
    var ydate = new Date(year, actualMonth, actualYesterdaysDate, (0, exports.actualHour)(time), +time[1], +time[2].split(" ")[0]);
    // console.log("\n\t yesterdaysDateByGivenDate: ", ydate.toDateString())
    // console.log("\n\t tomorrowsDate: ", tomorrowsDate())
    return ydate;
};
exports.yesterdaysDateByGivenDate = yesterdaysDateByGivenDate;
/**
 * This function says; I'll give you tomorrows' date corresponidng to the given
 * date you give me.
 * @param dateData a date-data of the form "YYYY-MM-DD", "YYYY/MM/DD" or "YYY-MM-DDTHH:mm:ss.000Z"
 * @returns
 */
var tomorrowsDateByGivenDate = function (dateData) {
    var reqDate = dateData;
    // console.log("\n\t tomorrowsDateByGivenDate-func-givenDate-dateData: ",dateData);;
    if (typeof (dateData) === "string") {
        if (dateData.includes("T")) {
            var splittedDate = dateData.split("T")[0];
            reqDate = (0, exports.givenDateAndCurrentTime)(splittedDate);
        }
        else {
            reqDate = (0, exports.givenDateAndCurrentTime)(dateData);
        }
    }
    else {
        reqDate = dateData;
    }
    ;
    // console.log("\n\t Test--reqDate: ", reqDate);
    var year = reqDate.getFullYear();
    var month = reqDate.getMonth();
    var day = reqDate.getDate();
    // const formedDate = new Date();
    var time = reqDate.toLocaleTimeString().split(":");
    var actualMonth = (exports.indexOfThrityDaysMonth.includes(month) && day === 30) ? month + 1
        : (exports.indexOfThrityOneDaysMonth.includes(month) && day === 31) ? month + 1
            // : (year % 4 !== 0  && month === 2) ? 2 // gives March
            : (month === 1 && (day === 28 || day === 29)) ? 2 // gives March
                : month;
    var actualTomorowsDate = (exports.indexOfThrityDaysMonth.includes(month) && day === 30) ? 1
        : (exports.indexOfThrityOneDaysMonth.includes(month) && day === 31) ? 1
            : (month === 1 && (day === 28 || day === 29)) ? 1
                : day + 1;
    var tomorrowsDate = new Date(year, actualMonth, actualTomorowsDate, (0, exports.actualHour)(time), +time[1], +time[2].split(" ")[0]);
    // console.log("\n\t todaysDate: ", todaysDate());
    return tomorrowsDate;
};
exports.tomorrowsDateByGivenDate = tomorrowsDateByGivenDate;
/**
 * convert dates of the format: Mon Oct 17 2022; to actual date types
 * @param dateString
 * @returns
 */
var dateStringToDate = function (dateString) {
    var desciptionDateToReverse = dateString.split(" ");
    // 
    if (desciptionDateToReverse.length > 0) {
        console.log("\n\t desciptionDateToReverse: ", desciptionDateToReverse);
        var descriptionMonth = Object.values(exports.monthAndIndex).indexOf(desciptionDateToReverse[1]);
        var descriptionDate = desciptionDateToReverse[2];
        var descriptionYear = desciptionDateToReverse[3];
        var date = (0, exports.givenDateAndCurrentTime)("".concat(descriptionYear, "-").concat(descriptionMonth + 1, "-").concat(descriptionDate));
        return date;
    }
    return "Invalid date argument";
};
exports.dateStringToDate = dateStringToDate;
